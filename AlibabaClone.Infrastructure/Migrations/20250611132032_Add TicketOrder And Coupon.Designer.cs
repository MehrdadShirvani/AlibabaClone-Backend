// <auto-generated />
using System;
using AlibabaClone.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlibabaClone.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250611132032_Add TicketOrder And Coupon")]
    partial class AddTicketOrderAndCoupon
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Persian_100_CI_AI")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("char(64)")
                        .IsFixedLength();

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.AccountRole", b =>
                {
                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.BankAccountDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("IBAN")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("BankAccountDetail");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Gender", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("EnglishFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnglishLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("GenderId")
                        .HasColumnType("smallint");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("IdNumber")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.CompanyAggregates.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<short>("LocationTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.LocationType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransactionAggregates.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsagesPerAccount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransactionAggregates.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CouponId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("TicketOrderId")
                        .HasColumnType("bigint");

                    b.Property<short>("TransactionTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("TicketOrderId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransactionAggregates.TransactionType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CompanionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<long>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("TicketOrderId")
                        .HasColumnType("bigint");

                    b.Property<short>("TicketStatusId")
                        .HasColumnType("smallint");

                    b.Property<long>("TravelerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanionId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("TicketOrderId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("TravelerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("TransportationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TransportationId");

                    b.ToTable("TicketOrder");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("TicketStatuses");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.Transportation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("VIPPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ToLocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.Seat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("bit");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("VehicleTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.VehicleType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Account", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Person", "Person")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.AccountRole", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.BankAccountDetail", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Account", "Account")
                        .WithOne("BankAccountDetail")
                        .HasForeignKey("AlibabaClone.Domain.Aggregates.AccountAggregates.BankAccountDetail", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Person", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.Location", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.LocationAggregates.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.LocationAggregates.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransactionAggregates.Transaction", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.TransactionAggregates.Coupon", "Coupon")
                        .WithMany("Transactions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketOrder", "TicketOrder")
                        .WithMany()
                        .HasForeignKey("TicketOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AlibabaClone.Domain.Aggregates.TransactionAggregates.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("TicketOrder");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.Ticket", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Person", "Companion")
                        .WithMany()
                        .HasForeignKey("CompanionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AlibabaClone.Domain.Aggregates.VehicleAggregates.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketOrder", "TicketOrder")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketStatus", "TicketStatus")
                        .WithMany()
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Person", "Traveler")
                        .WithMany("TraveledTickets")
                        .HasForeignKey("TravelerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Companion");

                    b.Navigation("Seat");

                    b.Navigation("TicketOrder");

                    b.Navigation("TicketStatus");

                    b.Navigation("Traveler");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketOrder", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.AccountAggregates.Account", "Buyer")
                        .WithMany("BoughtTicketOrders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.TransportationAggregates.Transportation", "Transportation")
                        .WithMany("TicketOrders")
                        .HasForeignKey("TransportationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Transportation");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.Transportation", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.CompanyAggregates.Company", "Company")
                        .WithMany("Transportations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.LocationAggregates.Location", "FromLocation")
                        .WithMany("DepartingTransportations")
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.LocationAggregates.Location", "ToLocation")
                        .WithMany("ArrivingTransportations")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlibabaClone.Domain.Aggregates.VehicleAggregates.Vehicle", "Vehicle")
                        .WithMany("Transportations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.Seat", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.VehicleAggregates.Vehicle", "Vehicle")
                        .WithMany("Seats")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.Vehicle", b =>
                {
                    b.HasOne("AlibabaClone.Domain.Aggregates.VehicleAggregates.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Account", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("BankAccountDetail");

                    b.Navigation("BoughtTicketOrders");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.AccountAggregates.Person", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("TraveledTickets");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.CompanyAggregates.Company", b =>
                {
                    b.Navigation("Transportations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.City", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.Location", b =>
                {
                    b.Navigation("ArrivingTransportations");

                    b.Navigation("DepartingTransportations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.LocationAggregates.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransactionAggregates.Coupon", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.TicketOrder", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.TransportationAggregates.Transportation", b =>
                {
                    b.Navigation("TicketOrders");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.Vehicle", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Transportations");
                });

            modelBuilder.Entity("AlibabaClone.Domain.Aggregates.VehicleAggregates.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
